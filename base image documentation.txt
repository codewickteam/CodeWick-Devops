Most Dockerfiles start from a parent image. If you need to completely control the contents of your image, 
you might need to create a base image instead. Here’s the difference:
    #A parent image is the image that your image is based on. It refers to the contents of the FROM directive 
      in the Dockerfile. Each subsequent declaration in the Dockerfile modifies this parent image. Most 
      Dockerfiles start from a parent image, rather than a base image. However, the terms are sometimes used
      interchangeably.
    #A base image has FROM scratch in its Dockerfile.

Creating a full image using tar:

In general, start with a working machine that is running the distribution you’d like to package as a parent image, 
though that is not required for some tools like Debian’s Debootstrap, which you can also use to build Ubuntu images.

It can be as simple as this to create an Ubuntu parent image:
(run the following codes)
--sudo debootstrap focal focal > /dev/null
--sudo tar -C focal -c . | docker import - focal
--docker run focal cat /etc/lsb-release

Creating a simple parent image using scratch:
1. Create a minimal container using scratch(creating a Dockerfile).
# syntax=docker/dockerfile:1
FROM scratch
ADD hello /
CMD ["/hello"]
2. Now build the image:
--docker build -t hello .
3. run the container.
--docker run --rm hello
This example creates the hello-world image used in the tutorials.

Note: Because Docker Desktop for Mac and Docker Desktop for Windows use a Linux VM, you need a Linux binary, 
rather than a Mac or Windows binary. You can use a Docker container to build it:
--docker run --rm -it -v $PWD:/build ubuntu:20.04

container# apt-get update && apt-get install build-essential
container# cd /build
container# gcc -o hello -static hello.c

